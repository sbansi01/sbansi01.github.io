knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load libraries
library(tidyverse)
library(janitor)
big_ten_nil <- read_csv("big-ten-nil.csv")
big_ten_nil <- read_csv("data/big-ten-nil.csv")
View(big_ten_nil)
big_ten_nil <- big_ten_nil %>%
clean_names()
View(big_ten_nil)
# NIL deals by school
big_ten_deals <- big_ten_nil %>%
group_by(school) %>%
summarise(total_deals = count(school))
big_ten_deals <- big_ten_nil %>%
group_by(school) %>%
summarise(total_deals = count)
big_ten_deals <- big_ten_nil %>%
group_by(school) %>%
summarise(total_deals = count())
big_ten_deals <- big_ten_nil %>%
group_by(school) %>%
summarise(total_deals = n())
View(big_ten_deals)
big_ten_deals <- big_ten_nil %>%
group_by(school) %>%
summarise(total_deals = n()) %>%
arrange(total_deals)
big_ten_deals <- big_ten_nil %>%
group_by(school) %>%
summarise(total_deals = n()) %>%
arrange(desc(total_deals))
# All Maryland deals
maryland_deals <- big_ten_nil %>%
filter(school == "Maryland Terrapins")
View(maryland_deals)
# Maryland athletes
maryland_athletes <- maryland_deals %>%
group_by(last_name, first_name) %>%
summarise(total_deals = n())
View(maryland_athletes)
# Maryland athletes
maryland_athletes <- maryland_deals %>%
group_by(last_name, first_name) %>%
summarise(total_deals = n()) %>%
arrange(desc(total_deals))
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load libraries
library(tidyverse)
library(janitor)
big_ten_nil <- read_csv("data/big-ten-nil.csv")
big_ten_nil <- big_ten_nil %>%
clean_names()
# NIL deals by school
big_ten_deals <- big_ten_nil %>%
group_by(school) %>%
summarise(total_deals = n()) %>%
arrange(desc(total_deals))
# All Maryland deals
maryland_deals <- big_ten_nil %>%
filter(school == "Maryland Terrapins")
# Maryland athletes
maryland_athletes <- maryland_deals %>%
group_by(last_name, first_name) %>%
summarise(total_deals = n()) %>%
arrange(desc(total_deals))
View(maryland_athletes)
View(big_ten_deals)
View(big_ten_nil)
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load libraries
library(tidyverse)
library(janitor)
big_ten_nil <- read_csv("data/big-ten-nil.csv")
#| label: load_libraries_settings_functions_data
#| include: false
###
# Load libraries
###
# install.packages("formattable")
# install.packages("mapview")
library(here)
library(formattable)
source(here("analysis/functions/load_libraries_functions.R"))
library(httr)
###
# Load style functions
###
source(here("analysis/functions/style_functions.R"))
###
# Load data
###
source(here("analysis/functions/load_data_functions.R"))
# Additional library
library(fedmatch)
## Within this code block, the dataframe we care about is ap_agencies
## In this code block, we are making a dataframe out of the policy manuals that are in Document Cloud (all_documents_ocr_info). Our goal will be to join this dataframe to ap_agencies so that we know which of our agencies have a policy manual.
# police-policy-manuals-211792
#*In place of "USERNAME and "PASSWORD," insert your respective credentials for DocumentCloud.
tokens <- POST("https://accounts.muckrock.com/api/token/", body=list(username="hannazakharenko", password="Croldie402*!"), encode="json")
refresh <- POST("https://accounts.muckrock.com/api/refresh/", body=list(refresh=content(tokens)$refresh))
#2. This code creates the make_request function -- a function that takes an endpoint segment and makes the request incorporating the if/else statement):
make_request <- function(link) {
print(url <- link)
header <- paste("Bearer", content(refresh)$access)
response <- GET(url, add_headers(Authorization=header))
content(response, as="parsed")
if (response$status_code == 403) {
refresh <- POST("https://accounts.muckrock.com/api/refresh/", body=list(refresh=content(tokens)$refresh))
header <- paste("Bearer", content(refresh)$access)
response <- GET(url, add_headers(Authorization=header))
content(response, as="parsed")
} else {
header <- paste("Bearer", content(refresh)$access)
response <- GET(url, add_headers(Authorization=header))
content(response, as="parsed")
}
# 3. This code uses the make_request function and gathers all the metadata for the documents on each page of DocumentCloud, assigning each page to its own separate response output. This loops through all the current pages that exist and appends them all to results, which can be unpacked to get the ids that we need.
link <- "https://api.www.documentcloud.org/api/documents?project=211792"
#link <- "https://api.www.documentcloud.org/api/documents?project=208011"
#link <- "https://api.www.documentcloud.org/api/documents?project=209606"
#link <-"https://api.www.documentcloud.org/api/documents/?project=206607"
response <- make_request(link)
next_page <- response$`next`
while (!(is.null(next_page))) {
next_response <- make_request(next_page)
response$results <- c(response$results, next_response$results)
next_page <- next_response$`next`
}
# 4. This code runs through all the metadata for each document, gathers the document ID, title, slug, page_count and document_link and appends it to a big dataframe. This is all the metadata needed to upload to s3 and basic information about the document for us to use.
all_documents_ocr_info <- tibble(
document_id = as.integer(NA),
document_slug = as.character(NA),
document_title = as.character(NA),
page_count = as.integer(NA),
document_link = as.character(NA),
created_at = as.character(NA)
) %>%
remove_empty(which="rows")
for(result in response$results){
doc_id <- result$id
slug <- result$slug
title <- result$title
num_pages <- result$page_count
link <- result$canonical_url
created <- result$created_at
temp <- tibble(
document_id = NA,
document_slug = NA,
document_title = NA,
page_count = NA,
document_link = NA,
created_at = NA
) %>%
mutate(document_id=doc_id) %>%
mutate(document_slug = slug) %>%
mutate(document_title=title) %>%
mutate(page_count=num_pages) %>%
mutate(document_link=link) %>%
mutate(created_at=created)
all_documents_ocr_info <- all_documents_ocr_info %>%
bind_rows(unique(temp))
}
write_rds(all_documents_ocr_info,"all_documents_ocr_info.rds")
# Cleaning
## Most of this is cleaning the agency column to prep for a join
all_documents_ocr_info_clean <- all_documents_ocr_info %>%
separate(document_title, into=c('state', 'agency'), sep='-', extra = "merge") %>%
mutate(state = str_trim(state)) %>%
mutate(agency_clean = str_squish(agency)) %>%
mutate(agency_clean = clean_strings(agency)) %>%
select(document_id:agency, agency_clean, page_count:created_at) %>%
mutate(agency_clean = str_remove_all(agency_clean, "policy manual|officer shootings|policy manuel|police manual|officer safety|use of force|restraint policy|useofforce|page 86|excited d|policy|force|office policy manual|080222|operations manual|and proc|poladminproc|general order|military equipment|coroner|death investigations|summary policies|taser|0|1|2|3|4|5|6|7|8|9|brady info|manual|not lexipol|office s|edure|master plan|master|resistence|resistance|directive|arrest|and weapons|policies s|foot pursuit|epartmentf|of procs|public patrol guide|rules and regulations|rules regulations|book|model|policies|proc|policies s|leg|general|response to|for handling prisoners positional asphyxia|police departmentf|pdf|handcuffing control holds|departmentestraint")) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'pd', 'police department')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'sheriff', 'sheriffs')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'sheriffs s office|sheriffs s department|sheriffs o|sheriffss|sheriffs office s|sheriffs department', 'sheriffs')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'sheriffs department', 'sheriffs')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'sheriffs s|sheriffs  s', 'sheriffs')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'dept|department  of s|department  r|department s|department  s|department s on|departmentestraint', 'department')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'u of', 'university of')) %>%
mutate(agency_clean = str_replace_all(agency_clean, ' u ', ' university ')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'ca highway', 'california highway')) %>%
mutate(agency_clean = str_replace_all(agency_clean, ' co ', ' county ')) %>%
mutate(agency_clean = str_replace_all(agency_clean, ' c ', ' college ')) %>%
mutate(agency_clean = str_replace_all(agency_clean, ' com ', ' community ')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'county le', 'county law enforcement')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'le pa', 'law enforcement pennsylvania')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'bureau  s', 'bureau')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'bay area rapid transit police department', 'bay area rapid transit bart police department')) %>%
mutate(agency_clean = str_replace_all(agency_clean, ' cole ', ' college ')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'victor valley college police department', 'victor valley community college police department')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'bellevue police department', 'bellevue police department oh')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'san mateo sheriffs', 'san mateo county sheriffs')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'berrien springs oronoko township police department', 'berrien springsoronoko township police department')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'buffalo police department', 'buffalo city police department')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'connecticut state police department', 'connecticut state police')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'el paso county sheriffs', 'el paso county sheriffs office')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'indianapolis metropolitan police department', 'indianapolis police')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'kern county sheriffs', 'kern county sd coroner')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'miami dade', 'miamidade')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'providence police department', 'providence police')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'richmond police department on|richmond police departmentestraint', 'richmond police department')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'roanoke police department', 'roanoke city police department')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'rochester police department', 'rochester city police department')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'metropolitan', 'metro')) %>%
mutate(agency_clean = str_replace_all(agency_clean, 'vineland city police department', 'vineland police'))
## Here we are adding a column with the full state name to prep for a join
all_documents_ocr_info_clean <- all_documents_ocr_info_clean %>%
left_join(state_crosswalk, by=c("state" = "state_abb")) %>%
mutate(agency_clean=str_squish(agency_clean))
all_documents_ocr_info_clean <- all_documents_ocr_info_clean %>%
select(document_id:state, d_state_of_death, agency:created_at)
## Here, we are creating a dataframe of the distinct values of states and agencies in the ap dataframe. We are also adding a column that we will use to help us with the join.
ap_agencies_clean <- ap_agencies %>%
distinct(d_state_of_death, o_agency_name) %>%
mutate(in_ap_agencies_clean = "in_ap_agencies_clean") %>%
mutate(o_agency_name_remove = str_remove_all(o_agency_name, "sheriffs|police|department|office|patrol"))
# Join docs to agencies
docs_and_agencies <- all_documents_ocr_info_clean %>%
left_join(ap_agencies_clean, by = c("d_state_of_death"="d_state_of_death", "agency_clean" = "o_agency_name")) %>%
rename(first_pass = in_ap_agencies_clean) %>%
mutate(agency_clean_department = paste0(agency_clean, " department")) %>%
left_join(ap_agencies_clean, by = c("d_state_of_death"="d_state_of_death", "agency_clean_department" = "o_agency_name")) %>%
rename(department_pass = in_ap_agencies_clean) %>%
mutate(agency_clean_office = paste0(agency_clean, " office")) %>%
left_join(ap_agencies_clean, by = c("d_state_of_death"="d_state_of_death", "agency_clean_office" = "o_agency_name")) %>%
rename(office_pass = in_ap_agencies_clean) %>%
mutate(agency_clean_remove = str_remove_all(agency_clean, "sheriffs|police|department|office|patrol")) %>%
left_join(ap_agencies_clean, by = c("d_state_of_death"="d_state_of_death", "agency_clean_remove" = "o_agency_name_remove")) %>%
rename(remove_pass = in_ap_agencies_clean) %>%
mutate(agency_doc = case_when(
first_pass == 'in_ap_agencies_clean' ~ "agency_doc",
department_pass == 'in_ap_agencies_clean' ~ "agency_doc",
office_pass == 'in_ap_agencies_clean' ~ "agency_doc",
remove_pass == 'in_ap_agencies_clean' ~ "agency_doc",
TRUE ~ "non_agency_doc"
))
docs_and_agencies_organized_view <- docs_and_agencies %>%
select(document_id, document_slug, d_state_of_death, agency_clean:created_at, agency_doc) %>%
arrange(agency_doc)
# Checking the agencies for which there are no docs - had started manually going through and comparing to ap_agencies
# Instead of checking all the non_agency_docs, we'll check the ones where the first word and the state match what is in ap_agencies
check_non_agency_docs <- docs_and_agencies %>%
filter(agency_doc == "non_agency_doc") %>%
select(d_state_of_death, agency_clean, agency_doc) %>%
mutate(first_word = word(agency_clean, 1)) %>%
mutate(first_word = str_trim(first_word)) %>%
mutate(d_state_of_death = str_trim(d_state_of_death))
ap_agencies_first_word <- ap_agencies_clean %>%
mutate(first_word = word(o_agency_name, 1)) %>%
select(d_state_of_death, first_word) %>%
mutate(first_word = str_trim(first_word)) %>%
mutate(d_state_of_death = str_trim(d_state_of_death))
first_word_check <- ap_agencies_first_word %>%
inner_join(check_non_agency_docs, by = c("first_word", "d_state_of_death")) %>%
arrange(first_word)
# Calculating some totals
agency_doc <- docs_and_agencies %>%
filter(agency_doc == "agency_doc")
agency_doc_total <- nrow(agency_doc)
non_agency_doc <- docs_and_agencies %>%
filter(agency_doc == "non_agency_doc")
non_agency_doc_total <- nrow(non_agency_doc)
View(agency_doc)
View(ap_agencies_clean)
View(non_agency_doc)
View(agency_doc)
# Calculating some totals
agency_doc <- docs_and_agencies %>%
filter(agency_doc == "agency_doc") %>%
select(document_id, agency_clean, d_state_of_death, document_slug, page_count:created_at)
agency_doc_total <- nrow(agency_doc)
non_agency_doc <- docs_and_agencies %>%
filter(agency_doc == "non_agency_doc") %>%
select(document_id, agency_clean, d_state_of_death, document_slug, page_count:created_at)
View(non_agency_doc)
output_formatted_table(agency_doc,"AP Agencies and Use of Force Manuals")
# Calculating some totals
agency_doc <- docs_and_agencies %>%
filter(agency_doc == "agency_doc") %>%
select(document_id, agency_clean, d_state_of_death, document_slug, page_count:created_at) %>%
arrange(agency_clean)
agency_doc_total <- nrow(agency_doc)
non_agency_doc <- docs_and_agencies %>%
filter(agency_doc == "non_agency_doc") %>%
select(document_id, agency_clean, d_state_of_death, document_slug, page_count:created_at) %>%
arrange(agency_clean)
non_agency_doc_total <- nrow(non_agency_doc)
output_formatted_table(agency_doc,"Use of Force Manuals and AP Agencies")
output_formatted_table(agency_doc,"Use of Force Manuals for AP Agencies")
# Calculating some totals
agency_doc <- docs_and_agencies %>%
filter(agency_doc == "agency_doc") %>%
select(document_id, agency_clean, d_state_of_death, document_slug, page_count:created_at) %>%
arrange(agency_clean) %>%
na.omit()
agency_doc_total <- nrow(agency_doc)
non_agency_doc <- docs_and_agencies %>%
filter(agency_doc == "non_agency_doc") %>%
select(document_id, agency_clean, d_state_of_death, document_slug, page_count:created_at) %>%
arrange(agency_clean) %>%
na.omit()
non_agency_doc_total <- nrow(non_agency_doc)
output_formatted_table(agency_doc,"Use of Force Manuals for AP Agencies")
agencies_with_docs <- agency_doc %>%
distinct(agency_clean, d_state_of_death)
View(agencies_with_docs)
View(ap_agencies)
agencies_without_docs <- ap_agencies %>%
anti_join(agencies_with_docs, by = c("d_state_of_death" = "d_state_of_death", "o_agency_name" = "agency_clean"))
View(agencies_without_docs)
agencies_without_docs <- ap_agencies %>%
anti_join(agencies_with_docs, by = c("d_state_of_death" = "d_state_of_death", "o_agency_name" = "agency_clean")) %>%
distinct(o_agency_name, d_state_of_death)
View(ap_agencies)
agencies_without_docs <- ap_agencies %>%
anti_join(agencies_with_docs, by = c("d_state_of_death" = "d_state_of_death", "o_agency_name" = "agency_clean")) %>%
distinct(o_agency_name, d_state_of_death) %>%
na.omit()
output_formatted_table(agency_doc,"Use of Force Manuals for AP Agencies")
agencies_without_docs <- ap_agencies %>%
anti_join(agencies_with_docs, by = c("d_state_of_death" = "d_state_of_death", "o_agency_name" = "agency_clean")) %>%
distinct(o_agency_name, d_state_of_death) %>%
na.omit() %>%
arrange(o_agency_name)
output_formatted_table(agencies_without_docs,"AP Agencies Without Use of Force Manuals")
